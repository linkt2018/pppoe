package pppoe

import (
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestDecodePPPoED(t *testing.T) {
	// PADI
	var data = []byte{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xe0, 0x4c, 0x36, 0x17, 0xf8, 0x88, 0x63, 0x11, 0x09, 0x00, 0x00, 0x00, 0x14, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	var hostUniq = []byte{0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}
	packet := gopacket.NewPacket(data, layers.LayerTypeEthernet, gopacket.Default)
	pppoed, err := DecodePPPoED(packet.Layer(layers.LayerTypeEthernet).LayerPayload())
	assert.Nil(t, err)
	assert.Equal(t, byte(0x11), pppoed.VersionAndType)
	assert.Equal(t, CodePADI, pppoed.Code)
	assert.Equal(t, uint16(0), pppoed.SessionID)
	assert.Equal(t, hostUniq, pppoed.HostUniq)
}

func TestPPPoED_Encode(t *testing.T) {
	// PADO
	var hostUniq = []byte{0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}
	acCookie := []byte{0x60, 0x62, 0x11, 0xac, 0x09, 0x50, 0x89, 0xb2, 0x5c, 0x95, 0xed, 0x1d, 0xcc, 0x70, 0x10, 0xe4, 0xb2, 0x2c, 0x00, 0x00}
	data := []byte{0x11, 0x07, 0x00, 0x00, 0x00, 0x36, 0x01, 0x02, 0x00, 0x06, 0x75, 0x62, 0x75, 0x6e, 0x74, 0x75, 0x01, 0x01, 0x00, 0x00, 0x01, 0x04, 0x00, 0x14, 0x60, 0x62, 0x11, 0xac, 0x09, 0x50, 0x89, 0xb2, 0x5c, 0x95, 0xed, 0x1d, 0xcc, 0x70, 0x10, 0xe4, 0xb2, 0x2c, 0x00, 0x00, 0x01, 0x03, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00}
	pppoed := NewPPPoEDPacket(CodePADO, 0, "ubuntu", hostUniq, acCookie)
	assert.Equal(t, data, pppoed.Encode())
}
