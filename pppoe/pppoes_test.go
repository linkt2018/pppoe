package pppoe

import (
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestDecodePPPoES(t *testing.T) {
	// configuration request
	data := []byte{0x00, 0x0c, 0x29, 0x8b, 0x82, 0xc5, 0x00, 0xe0, 0x4c, 0x36, 0x17, 0xf8, 0x88, 0x64, 0x11, 0x00, 0x00, 0x01, 0x00, 0x17, 0xc0, 0x21, 0x01, 0x00, 0x00, 0x15, 0x01, 0x04, 0x05, 0xc8, 0x05, 0x06, 0x07, 0x97, 0x52, 0x1d, 0x07, 0x02, 0x08, 0x02, 0x0d, 0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	packet := gopacket.NewPacket(data, layers.LayerTypeEthernet, gopacket.Default)
	p, err := DecodePPPoES(packet.Layer(layers.LayerTypeEthernet).LayerPayload())
	assert.Nil(t, err)
	assert.Equal(t, byte(0x11), p.VersionAndType)
	assert.Equal(t, SCodeSessionData, p.Code)
	assert.Equal(t, uint16(1), p.SessionID)
	assert.Equal(t, P2PLinkCtrlProtocol, p.P2PProtocol)

	assert.Equal(t, LinkCodeConfigRequest, p.LinkProtocol.Code)
	assert.Equal(t, byte(0), p.LinkProtocol.Identifier)
	assert.Equal(t, uint16(1480), p.LinkProtocol.MaxReceiveUint)
	assert.Equal(t, uint32(127357469), p.LinkProtocol.MagicNumber)
	assert.True(t, p.LinkProtocol.ProtocolFieldCompression)
	assert.True(t, p.LinkProtocol.AddressCtrlFieldCompression)
	assert.Equal(t, CallbackOperationCBCP, p.LinkProtocol.CallbackOperation)

	// authenticate request
	data = []byte{0x00, 0x0c, 0x29, 0x8b, 0x82, 0xc5, 0x00, 0xe0, 0x4c, 0x36, 0x17, 0xf8, 0x88, 0x64, 0x11, 0x00, 0x00, 0x01, 0x00, 0x11, 0xc0, 0x23, 0x01, 0x00, 0x00, 0x0f, 0x06, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x03, 0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	packet = gopacket.NewPacket(data, layers.LayerTypeEthernet, gopacket.Default)
	p, err = DecodePPPoES(packet.Layer(layers.LayerTypeEthernet).LayerPayload())
	assert.Nil(t, err)
	assert.Equal(t, byte(0x11), p.VersionAndType)
	assert.Equal(t, SCodeSessionData, p.Code)
	assert.Equal(t, uint16(1), p.SessionID)
	assert.Equal(t, P2PAuthProtocol, p.P2PProtocol)

	assert.Equal(t, byte(1), p.PwdAuthProtocol.Code)
	assert.Equal(t, byte(0), p.PwdAuthProtocol.Identifier)
	assert.Equal(t, "123123", p.PwdAuthProtocol.PeerID)
	assert.Equal(t, "123", p.PwdAuthProtocol.Password)
}
